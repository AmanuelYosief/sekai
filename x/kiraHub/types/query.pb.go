// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetOrderBooksRequest struct {
	QueryType   string `protobuf:"bytes,1,opt,name=QueryType,proto3" json:"QueryType,omitempty"`
	QueryValue  string `protobuf:"bytes,2,opt,name=QueryValue,proto3" json:"QueryValue,omitempty"`
	QueryValue2 string `protobuf:"bytes,3,opt,name=QueryValue2,proto3" json:"QueryValue2,omitempty"`
}

func (m *GetOrderBooksRequest) Reset()         { *m = GetOrderBooksRequest{} }
func (m *GetOrderBooksRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrderBooksRequest) ProtoMessage()    {}
func (*GetOrderBooksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{0}
}
func (m *GetOrderBooksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrderBooksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrderBooksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrderBooksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderBooksRequest.Merge(m, src)
}
func (m *GetOrderBooksRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrderBooksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderBooksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderBooksRequest proto.InternalMessageInfo

func (m *GetOrderBooksRequest) GetQueryType() string {
	if m != nil {
		return m.QueryType
	}
	return ""
}

func (m *GetOrderBooksRequest) GetQueryValue() string {
	if m != nil {
		return m.QueryValue
	}
	return ""
}

func (m *GetOrderBooksRequest) GetQueryValue2() string {
	if m != nil {
		return m.QueryValue2
	}
	return ""
}

type GetOrderBooksResponse struct {
	Orderbooks []OrderBook `protobuf:"bytes,1,rep,name=orderbooks,proto3,casttype=OrderBook" json:"orderbooks"`
}

func (m *GetOrderBooksResponse) Reset()         { *m = GetOrderBooksResponse{} }
func (m *GetOrderBooksResponse) String() string { return proto.CompactTextString(m) }
func (*GetOrderBooksResponse) ProtoMessage()    {}
func (*GetOrderBooksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{1}
}
func (m *GetOrderBooksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrderBooksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrderBooksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrderBooksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderBooksResponse.Merge(m, src)
}
func (m *GetOrderBooksResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrderBooksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderBooksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderBooksResponse proto.InternalMessageInfo

func (m *GetOrderBooksResponse) GetOrderbooks() []OrderBook {
	if m != nil {
		return m.Orderbooks
	}
	return nil
}

type GetOrderBooksByTPRequest struct {
	Base  string `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Quote string `protobuf:"bytes,2,opt,name=Quote,proto3" json:"Quote,omitempty"`
}

func (m *GetOrderBooksByTPRequest) Reset()         { *m = GetOrderBooksByTPRequest{} }
func (m *GetOrderBooksByTPRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrderBooksByTPRequest) ProtoMessage()    {}
func (*GetOrderBooksByTPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{2}
}
func (m *GetOrderBooksByTPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrderBooksByTPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrderBooksByTPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrderBooksByTPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderBooksByTPRequest.Merge(m, src)
}
func (m *GetOrderBooksByTPRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrderBooksByTPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderBooksByTPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderBooksByTPRequest proto.InternalMessageInfo

func (m *GetOrderBooksByTPRequest) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *GetOrderBooksByTPRequest) GetQuote() string {
	if m != nil {
		return m.Quote
	}
	return ""
}

type GetOrdersRequest struct {
	OrderBookID string `protobuf:"bytes,1,opt,name=OrderBookID,proto3" json:"OrderBookID,omitempty"`
	MaxOrders   uint32 `protobuf:"varint,2,opt,name=MaxOrders,proto3" json:"MaxOrders,omitempty"`
	MinAmount   uint32 `protobuf:"varint,3,opt,name=MinAmount,proto3" json:"MinAmount,omitempty"`
}

func (m *GetOrdersRequest) Reset()         { *m = GetOrdersRequest{} }
func (m *GetOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrdersRequest) ProtoMessage()    {}
func (*GetOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{3}
}
func (m *GetOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrdersRequest.Merge(m, src)
}
func (m *GetOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrdersRequest proto.InternalMessageInfo

func (m *GetOrdersRequest) GetOrderBookID() string {
	if m != nil {
		return m.OrderBookID
	}
	return ""
}

func (m *GetOrdersRequest) GetMaxOrders() uint32 {
	if m != nil {
		return m.MaxOrders
	}
	return 0
}

func (m *GetOrdersRequest) GetMinAmount() uint32 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

type GetOrdersResponse struct {
	Orders []LimitOrder `protobuf:"bytes,1,rep,name=orders,proto3,casttype=LimitOrder" json:"orders"`
}

func (m *GetOrdersResponse) Reset()         { *m = GetOrdersResponse{} }
func (m *GetOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*GetOrdersResponse) ProtoMessage()    {}
func (*GetOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{4}
}
func (m *GetOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrdersResponse.Merge(m, src)
}
func (m *GetOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrdersResponse proto.InternalMessageInfo

func (m *GetOrdersResponse) GetOrders() []LimitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type GetSignerKeysRequest struct {
	Curator github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,6,opt,name=Curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"Curator,omitempty"`
}

func (m *GetSignerKeysRequest) Reset()         { *m = GetSignerKeysRequest{} }
func (m *GetSignerKeysRequest) String() string { return proto.CompactTextString(m) }
func (*GetSignerKeysRequest) ProtoMessage()    {}
func (*GetSignerKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{5}
}
func (m *GetSignerKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSignerKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSignerKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSignerKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSignerKeysRequest.Merge(m, src)
}
func (m *GetSignerKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSignerKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSignerKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSignerKeysRequest proto.InternalMessageInfo

func (m *GetSignerKeysRequest) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

type GetSignerKeysResponse struct {
	Signerkeys []SignerKey `protobuf:"bytes,1,rep,name=signerkeys,proto3,casttype=SignerKey" json:"signerkeys"`
}

func (m *GetSignerKeysResponse) Reset()         { *m = GetSignerKeysResponse{} }
func (m *GetSignerKeysResponse) String() string { return proto.CompactTextString(m) }
func (*GetSignerKeysResponse) ProtoMessage()    {}
func (*GetSignerKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{6}
}
func (m *GetSignerKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSignerKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSignerKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSignerKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSignerKeysResponse.Merge(m, src)
}
func (m *GetSignerKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSignerKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSignerKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSignerKeysResponse proto.InternalMessageInfo

func (m *GetSignerKeysResponse) GetSignerkeys() []SignerKey {
	if m != nil {
		return m.Signerkeys
	}
	return nil
}

func init() {
	proto.RegisterType((*GetOrderBooksRequest)(nil), "kira.kiraHub.GetOrderBooksRequest")
	proto.RegisterType((*GetOrderBooksResponse)(nil), "kira.kiraHub.GetOrderBooksResponse")
	proto.RegisterType((*GetOrderBooksByTPRequest)(nil), "kira.kiraHub.GetOrderBooksByTPRequest")
	proto.RegisterType((*GetOrdersRequest)(nil), "kira.kiraHub.GetOrdersRequest")
	proto.RegisterType((*GetOrdersResponse)(nil), "kira.kiraHub.GetOrdersResponse")
	proto.RegisterType((*GetSignerKeysRequest)(nil), "kira.kiraHub.GetSignerKeysRequest")
	proto.RegisterType((*GetSignerKeysResponse)(nil), "kira.kiraHub.GetSignerKeysResponse")
}

func init() { proto.RegisterFile("query.proto", fileDescriptor_5c6ac9b241082464) }

var fileDescriptor_5c6ac9b241082464 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x18, 0x4d, 0x36, 0x28, 0xea, 0xd7, 0x4d, 0x30, 0xab, 0x88, 0xa8, 0x42, 0x69, 0x14, 0x24, 0xd4,
	0x0b, 0x96, 0x8a, 0xf2, 0x04, 0x0d, 0x15, 0x7f, 0xe3, 0x6f, 0x61, 0x42, 0x62, 0x77, 0x49, 0x6a,
	0x95, 0xa8, 0xb4, 0xce, 0xec, 0x04, 0x2d, 0x6f, 0xc1, 0x63, 0xed, 0x72, 0x97, 0x5c, 0x55, 0xa8,
	0x7d, 0x04, 0xee, 0x76, 0x85, 0x62, 0x3b, 0x8e, 0xcb, 0xba, 0x6a, 0x37, 0xad, 0x7d, 0xec, 0x73,
	0x3e, 0x7f, 0xe7, 0x7c, 0x0a, 0xb4, 0xce, 0x72, 0x4c, 0x0b, 0x2f, 0xa5, 0x24, 0x23, 0x68, 0x6f,
	0x9a, 0xd0, 0xd0, 0x2b, 0x7f, 0xde, 0xe4, 0x51, 0xa7, 0x45, 0xe8, 0x18, 0x53, 0x71, 0xd4, 0xb9,
	0xcf, 0x92, 0xc9, 0x1c, 0xd3, 0x29, 0x96, 0x77, 0x3b, 0xed, 0x09, 0x99, 0x10, 0xbe, 0xec, 0x97,
	0x2b, 0x81, 0xba, 0x3f, 0xa1, 0xfd, 0x1a, 0x67, 0x9f, 0x4a, 0xa2, 0x4f, 0xc8, 0x94, 0x05, 0xf8,
	0x2c, 0xc7, 0x2c, 0x43, 0x8f, 0xa1, 0x79, 0x5c, 0x16, 0x3a, 0x29, 0x52, 0x6c, 0x99, 0x8e, 0xd9,
	0x6b, 0x06, 0x35, 0x80, 0x6c, 0x00, 0xbe, 0xf9, 0x1a, 0xfe, 0xc8, 0xb1, 0xb5, 0xc3, 0x8f, 0x35,
	0x04, 0x39, 0xd0, 0xaa, 0x77, 0x03, 0x6b, 0x97, 0x5f, 0xd0, 0x21, 0x37, 0x86, 0x87, 0xff, 0xd5,
	0x65, 0x29, 0x99, 0x33, 0x8c, 0xde, 0x01, 0xf0, 0x36, 0xa2, 0x12, 0xb5, 0x4c, 0x67, 0xb7, 0xd7,
	0x1a, 0x3c, 0xf2, 0xf4, 0x3e, 0x3d, 0xc5, 0xf2, 0x0f, 0x2e, 0x16, 0x5d, 0xe3, 0x6a, 0xd1, 0x6d,
	0x2a, 0x28, 0xd0, 0xd8, 0xee, 0x08, 0xac, 0xb5, 0x22, 0x7e, 0x71, 0xf2, 0xb9, 0x6a, 0x10, 0xc1,
	0x1d, 0x3f, 0x64, 0x55, 0x6f, 0x7c, 0x8d, 0xda, 0x70, 0xf7, 0x38, 0x27, 0x59, 0xd5, 0x91, 0xd8,
	0xb8, 0x29, 0x3c, 0xa8, 0x54, 0x94, 0x3d, 0x0e, 0xb4, 0x94, 0xec, 0xdb, 0x91, 0x14, 0xd1, 0xa1,
	0xd2, 0xc0, 0x0f, 0xe1, 0xb9, 0x60, 0x71, 0xbd, 0xfd, 0xa0, 0x06, 0xf8, 0x69, 0x32, 0x1f, 0xce,
	0x48, 0x3e, 0xcf, 0xb8, 0x3d, 0xe5, 0x69, 0x05, 0xb8, 0xdf, 0xe0, 0x40, 0xab, 0x28, 0x8d, 0x19,
	0x41, 0x83, 0x08, 0x35, 0x61, 0x8a, 0xb5, 0x6e, 0xca, 0xfb, 0x64, 0x96, 0xc8, 0x56, 0x91, 0x74,
	0x05, 0x6a, 0x2c, 0x90, 0x5c, 0x37, 0xe6, 0x79, 0x7f, 0xe1, 0xb3, 0x71, 0x84, 0x0b, 0xd5, 0xd0,
	0x11, 0xdc, 0x7b, 0x99, 0xd3, 0x30, 0x23, 0xd4, 0x6a, 0x38, 0x66, 0x6f, 0xcf, 0x7f, 0x7e, 0xb5,
	0xe8, 0x1e, 0x4e, 0x92, 0xec, 0x7b, 0x1e, 0x79, 0x31, 0x99, 0xf5, 0x63, 0xc2, 0x66, 0x84, 0xc9,
	0xbf, 0x43, 0x36, 0x9e, 0xf6, 0xb3, 0x22, 0xc5, 0xcc, 0x1b, 0xc6, 0xf1, 0x70, 0x3c, 0xa6, 0x98,
	0xb1, 0xa0, 0x52, 0x90, 0xe1, 0xea, 0x45, 0xea, 0x70, 0xd5, 0x58, 0xde, 0x10, 0xae, 0x62, 0xd5,
	0xe1, 0x2a, 0x28, 0xd0, 0xd8, 0x83, 0xbf, 0x3b, 0x65, 0x5a, 0x98, 0x16, 0xe8, 0x14, 0xf6, 0xd7,
	0x62, 0x46, 0xee, 0xba, 0xe4, 0xa6, 0x01, 0xef, 0x3c, 0xd9, 0x7a, 0x47, 0xbc, 0xd7, 0x35, 0x50,
	0x54, 0x47, 0xa1, 0x46, 0x08, 0x3d, 0xdd, 0xc2, 0xd5, 0x66, 0xec, 0xb6, 0x35, 0x3e, 0x42, 0x53,
	0xc5, 0x8d, 0xec, 0xcd, 0x1c, 0xf5, 0xee, 0xee, 0x8d, 0xe7, 0x4a, 0x4f, 0xf8, 0x51, 0xdb, 0xbf,
	0xc1, 0x8f, 0x6b, 0x03, 0xb0, 0xe1, 0xad, 0xd7, 0xf3, 0x73, 0x0d, 0xff, 0xd5, 0xc5, 0xd2, 0x36,
	0x2f, 0x97, 0xb6, 0xf9, 0x67, 0x69, 0x9b, 0xbf, 0x56, 0xb6, 0x71, 0xb9, 0xb2, 0x8d, 0xdf, 0x2b,
	0xdb, 0x38, 0x7d, 0xb6, 0x75, 0x58, 0xce, 0xfb, 0x52, 0x59, 0x8c, 0x4d, 0xd4, 0xe0, 0x9f, 0x9f,
	0x17, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x00, 0x2f, 0xfe, 0xd9, 0xcf, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetOrderBooks(ctx context.Context, in *GetOrderBooksRequest, opts ...grpc.CallOption) (*GetOrderBooksResponse, error)
	GetOrderBooksByTP(ctx context.Context, in *GetOrderBooksByTPRequest, opts ...grpc.CallOption) (*GetOrderBooksResponse, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	GetSignerKeys(ctx context.Context, in *GetSignerKeysRequest, opts ...grpc.CallOption) (*GetSignerKeysResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetOrderBooks(ctx context.Context, in *GetOrderBooksRequest, opts ...grpc.CallOption) (*GetOrderBooksResponse, error) {
	out := new(GetOrderBooksResponse)
	err := c.cc.Invoke(ctx, "/kira.kiraHub.Query/GetOrderBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOrderBooksByTP(ctx context.Context, in *GetOrderBooksByTPRequest, opts ...grpc.CallOption) (*GetOrderBooksResponse, error) {
	out := new(GetOrderBooksResponse)
	err := c.cc.Invoke(ctx, "/kira.kiraHub.Query/GetOrderBooksByTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, "/kira.kiraHub.Query/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSignerKeys(ctx context.Context, in *GetSignerKeysRequest, opts ...grpc.CallOption) (*GetSignerKeysResponse, error) {
	out := new(GetSignerKeysResponse)
	err := c.cc.Invoke(ctx, "/kira.kiraHub.Query/GetSignerKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetOrderBooks(context.Context, *GetOrderBooksRequest) (*GetOrderBooksResponse, error)
	GetOrderBooksByTP(context.Context, *GetOrderBooksByTPRequest) (*GetOrderBooksResponse, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	GetSignerKeys(context.Context, *GetSignerKeysRequest) (*GetSignerKeysResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetOrderBooks(ctx context.Context, req *GetOrderBooksRequest) (*GetOrderBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBooks not implemented")
}
func (*UnimplementedQueryServer) GetOrderBooksByTP(ctx context.Context, req *GetOrderBooksByTPRequest) (*GetOrderBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBooksByTP not implemented")
}
func (*UnimplementedQueryServer) GetOrders(ctx context.Context, req *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (*UnimplementedQueryServer) GetSignerKeys(ctx context.Context, req *GetSignerKeysRequest) (*GetSignerKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignerKeys not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetOrderBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOrderBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.kiraHub.Query/GetOrderBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOrderBooks(ctx, req.(*GetOrderBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOrderBooksByTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderBooksByTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOrderBooksByTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.kiraHub.Query/GetOrderBooksByTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOrderBooksByTP(ctx, req.(*GetOrderBooksByTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.kiraHub.Query/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSignerKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignerKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSignerKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.kiraHub.Query/GetSignerKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSignerKeys(ctx, req.(*GetSignerKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.kiraHub.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderBooks",
			Handler:    _Query_GetOrderBooks_Handler,
		},
		{
			MethodName: "GetOrderBooksByTP",
			Handler:    _Query_GetOrderBooksByTP_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _Query_GetOrders_Handler,
		},
		{
			MethodName: "GetSignerKeys",
			Handler:    _Query_GetSignerKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query.proto",
}

func (m *GetOrderBooksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrderBooksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrderBooksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryValue2) > 0 {
		i -= len(m.QueryValue2)
		copy(dAtA[i:], m.QueryValue2)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryValue2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QueryValue) > 0 {
		i -= len(m.QueryValue)
		copy(dAtA[i:], m.QueryValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueryType) > 0 {
		i -= len(m.QueryType)
		copy(dAtA[i:], m.QueryType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrderBooksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrderBooksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrderBooksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orderbooks) > 0 {
		for iNdEx := len(m.Orderbooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orderbooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetOrderBooksByTPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrderBooksByTPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrderBooksByTPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Quote) > 0 {
		i -= len(m.Quote)
		copy(dAtA[i:], m.Quote)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Quote)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinAmount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MinAmount))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxOrders != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxOrders))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrderBookID) > 0 {
		i -= len(m.OrderBookID)
		copy(dAtA[i:], m.OrderBookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderBookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSignerKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSignerKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSignerKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}

func (m *GetSignerKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSignerKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSignerKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signerkeys) > 0 {
		for iNdEx := len(m.Signerkeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signerkeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetOrderBooksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QueryValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QueryValue2)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOrderBooksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orderbooks) > 0 {
		for _, e := range m.Orderbooks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetOrderBooksByTPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Quote)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderBookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MaxOrders != 0 {
		n += 1 + sovQuery(uint64(m.MaxOrders))
	}
	if m.MinAmount != 0 {
		n += 1 + sovQuery(uint64(m.MinAmount))
	}
	return n
}

func (m *GetOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetSignerKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetSignerKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signerkeys) > 0 {
		for _, e := range m.Signerkeys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetOrderBooksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrderBooksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrderBooksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryValue2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryValue2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrderBooksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrderBooksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrderBooksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderbooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderbooks = append(m.Orderbooks, OrderBook{})
			if err := m.Orderbooks[len(m.Orderbooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrderBooksByTPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrderBooksByTPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrderBooksByTPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOrders", wireType)
			}
			m.MaxOrders = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOrders |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmount", wireType)
			}
			m.MinAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAmount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, LimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSignerKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSignerKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSignerKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSignerKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSignerKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSignerKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signerkeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signerkeys = append(m.Signerkeys, SignerKey{})
			if err := m.Signerkeys[len(m.Signerkeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
