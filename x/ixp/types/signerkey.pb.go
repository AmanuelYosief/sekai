// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: signerkey.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SignerKeyType int32

const (
	SignerKeyType_Secp256k1 SignerKeyType = 0
	SignerKeyType_Ed25519   SignerKeyType = 1
)

var SignerKeyType_name = map[int32]string{
	0: "Secp256k1",
	1: "Ed25519",
}

var SignerKeyType_value = map[string]int32{
	"Secp256k1": 0,
	"Ed25519":   1,
}

func (x SignerKeyType) String() string {
	return proto.EnumName(SignerKeyType_name, int32(x))
}

func (SignerKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_184d3587f9655317, []int{0}
}

type SignerKey struct {
	PubKey      string                                        `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	KeyType     SignerKeyType                                 `protobuf:"varint,2,opt,name=KeyType,proto3,enum=kira.ixp.SignerKeyType" json:"KeyType,omitempty"`
	ExpiryTime  int64                                         `protobuf:"varint,3,opt,name=ExpiryTime,proto3" json:"ExpiryTime,omitempty"`
	Enabled     bool                                          `protobuf:"varint,4,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	Data        string                                        `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	Permissions []int64                                       `protobuf:"varint,6,rep,packed,name=Permissions,proto3" json:"Permissions,omitempty"`
	Curator     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=Curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"Curator,omitempty"`
}

func (m *SignerKey) Reset()         { *m = SignerKey{} }
func (m *SignerKey) String() string { return proto.CompactTextString(m) }
func (*SignerKey) ProtoMessage()    {}
func (*SignerKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_184d3587f9655317, []int{0}
}
func (m *SignerKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerKey.Merge(m, src)
}
func (m *SignerKey) XXX_Size() int {
	return m.Size()
}
func (m *SignerKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerKey.DiscardUnknown(m)
}

var xxx_messageInfo_SignerKey proto.InternalMessageInfo

func (m *SignerKey) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *SignerKey) GetKeyType() SignerKeyType {
	if m != nil {
		return m.KeyType
	}
	return SignerKeyType_Secp256k1
}

func (m *SignerKey) GetExpiryTime() int64 {
	if m != nil {
		return m.ExpiryTime
	}
	return 0
}

func (m *SignerKey) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SignerKey) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *SignerKey) GetPermissions() []int64 {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *SignerKey) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

type MsgUpsertSignerKey struct {
	PubKey      string                                        `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	KeyType     SignerKeyType                                 `protobuf:"varint,2,opt,name=KeyType,proto3,enum=kira.ixp.SignerKeyType" json:"KeyType,omitempty"`
	ExpiryTime  int64                                         `protobuf:"varint,3,opt,name=ExpiryTime,proto3" json:"ExpiryTime,omitempty"`
	Enabled     bool                                          `protobuf:"varint,4,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	Data        string                                        `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	Permissions []int64                                       `protobuf:"varint,6,rep,packed,name=Permissions,proto3" json:"Permissions,omitempty"`
	Curator     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=Curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"Curator,omitempty"`
}

func (m *MsgUpsertSignerKey) Reset()         { *m = MsgUpsertSignerKey{} }
func (m *MsgUpsertSignerKey) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertSignerKey) ProtoMessage()    {}
func (*MsgUpsertSignerKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_184d3587f9655317, []int{1}
}
func (m *MsgUpsertSignerKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertSignerKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertSignerKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertSignerKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertSignerKey.Merge(m, src)
}
func (m *MsgUpsertSignerKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertSignerKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertSignerKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertSignerKey proto.InternalMessageInfo

func (m *MsgUpsertSignerKey) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *MsgUpsertSignerKey) GetKeyType() SignerKeyType {
	if m != nil {
		return m.KeyType
	}
	return SignerKeyType_Secp256k1
}

func (m *MsgUpsertSignerKey) GetExpiryTime() int64 {
	if m != nil {
		return m.ExpiryTime
	}
	return 0
}

func (m *MsgUpsertSignerKey) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *MsgUpsertSignerKey) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *MsgUpsertSignerKey) GetPermissions() []int64 {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *MsgUpsertSignerKey) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

func init() {
	proto.RegisterEnum("kira.ixp.SignerKeyType", SignerKeyType_name, SignerKeyType_value)
	proto.RegisterType((*SignerKey)(nil), "kira.ixp.SignerKey")
	proto.RegisterType((*MsgUpsertSignerKey)(nil), "kira.ixp.MsgUpsertSignerKey")
}

func init() { proto.RegisterFile("signerkey.proto", fileDescriptor_184d3587f9655317) }

var fileDescriptor_184d3587f9655317 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x52, 0x4f, 0x6b, 0xe2, 0x40,
	0x1c, 0xcd, 0x18, 0xd7, 0xe8, 0xb8, 0xee, 0xca, 0xb0, 0xec, 0x0e, 0x7b, 0xc8, 0x06, 0x61, 0x21,
	0xec, 0x62, 0x42, 0x5c, 0x5c, 0xe8, 0xa9, 0xa8, 0xf5, 0x14, 0x0a, 0x12, 0xed, 0xa5, 0xb7, 0xfc,
	0x19, 0xd2, 0x21, 0x8d, 0x33, 0xcc, 0x44, 0x48, 0xbe, 0x45, 0xa1, 0xd7, 0x7e, 0xa0, 0x1e, 0x3d,
	0xf6, 0x54, 0x8a, 0x7e, 0x8b, 0x9e, 0x8a, 0xd1, 0x14, 0xdb, 0xcf, 0xd0, 0xd3, 0xfc, 0x7e, 0xef,
	0x37, 0xef, 0xcd, 0x9b, 0xc7, 0x0f, 0x7e, 0x95, 0x34, 0x5e, 0x12, 0x91, 0x90, 0xc2, 0xe2, 0x82,
	0x65, 0x0c, 0x35, 0x13, 0x2a, 0x7c, 0x8b, 0xe6, 0xfc, 0xe7, 0xb7, 0x98, 0xc5, 0xac, 0x04, 0xed,
	0x5d, 0xb5, 0x9f, 0xf7, 0x6e, 0x6b, 0xb0, 0x35, 0x2f, 0x39, 0x2e, 0x29, 0xd0, 0x77, 0xd8, 0x98,
	0xad, 0x02, 0x97, 0x14, 0x18, 0x18, 0xc0, 0x6c, 0x79, 0x87, 0x0e, 0x39, 0x50, 0x73, 0x49, 0xb1,
	0x28, 0x38, 0xc1, 0x35, 0x03, 0x98, 0x5f, 0x06, 0x3f, 0xac, 0x4a, 0xd7, 0x7a, 0x65, 0xef, 0xc6,
	0x5e, 0x75, 0x0f, 0xe9, 0x10, 0x4e, 0x73, 0x4e, 0x45, 0xb1, 0xa0, 0x29, 0xc1, 0xaa, 0x01, 0x4c,
	0xd5, 0x3b, 0x42, 0x10, 0x86, 0xda, 0x74, 0xe9, 0x07, 0xd7, 0x24, 0xc2, 0x75, 0x03, 0x98, 0x4d,
	0xaf, 0x6a, 0x11, 0x82, 0xf5, 0x33, 0x3f, 0xf3, 0xf1, 0xa7, 0xd2, 0x42, 0x59, 0x23, 0x03, 0xb6,
	0x67, 0x44, 0xa4, 0x54, 0x4a, 0xca, 0x96, 0x12, 0x37, 0x0c, 0xd5, 0x54, 0xbd, 0x63, 0x08, 0xb9,
	0x50, 0x9b, 0xac, 0x84, 0x9f, 0x31, 0x81, 0x35, 0x03, 0x98, 0x9f, 0xc7, 0xce, 0xf3, 0xe3, 0xaf,
	0x7e, 0x4c, 0xb3, 0xab, 0x55, 0x60, 0x85, 0x2c, 0xb5, 0x43, 0x26, 0x53, 0x26, 0x0f, 0x47, 0x5f,
	0x46, 0x89, 0x9d, 0x15, 0x9c, 0x48, 0x6b, 0x14, 0x86, 0xa3, 0x28, 0x12, 0x44, 0x4a, 0xaf, 0x52,
	0xe8, 0xdd, 0xd5, 0x20, 0x3a, 0x97, 0xf1, 0x05, 0x97, 0x44, 0x64, 0x1f, 0xf1, 0xbc, 0x8b, 0xe7,
	0xcf, 0x5f, 0xd8, 0x79, 0xf3, 0x2d, 0xd4, 0x81, 0xad, 0x39, 0x09, 0xf9, 0x60, 0xf8, 0x3f, 0x71,
	0xba, 0x0a, 0x6a, 0x43, 0x6d, 0x1a, 0x0d, 0x86, 0x43, 0xe7, 0xa4, 0x0b, 0xc6, 0xa7, 0xf7, 0x1b,
	0x1d, 0xac, 0x37, 0x3a, 0x78, 0xda, 0xe8, 0xe0, 0x66, 0xab, 0x2b, 0xeb, 0xad, 0xae, 0x3c, 0x6c,
	0x75, 0xe5, 0xf2, 0xf7, 0xd1, 0xf3, 0x2e, 0x15, 0xfe, 0x84, 0x09, 0x62, 0x4b, 0x92, 0xf8, 0xd4,
	0xce, 0x6d, 0x9a, 0xf3, 0xbd, 0x83, 0xa0, 0x51, 0x6e, 0xea, 0xbf, 0x97, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe3, 0x0e, 0xee, 0xb3, 0xdc, 0x02, 0x00, 0x00,
}

func (m *SignerKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintSignerkey(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Permissions) > 0 {
		dAtA2 := make([]byte, len(m.Permissions)*10)
		var j1 int
		for _, num1 := range m.Permissions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSignerkey(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSignerkey(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ExpiryTime != 0 {
		i = encodeVarintSignerkey(dAtA, i, uint64(m.ExpiryTime))
		i--
		dAtA[i] = 0x18
	}
	if m.KeyType != 0 {
		i = encodeVarintSignerkey(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintSignerkey(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpsertSignerKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertSignerKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertSignerKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintSignerkey(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Permissions) > 0 {
		dAtA4 := make([]byte, len(m.Permissions)*10)
		var j3 int
		for _, num1 := range m.Permissions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSignerkey(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSignerkey(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ExpiryTime != 0 {
		i = encodeVarintSignerkey(dAtA, i, uint64(m.ExpiryTime))
		i--
		dAtA[i] = 0x18
	}
	if m.KeyType != 0 {
		i = encodeVarintSignerkey(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintSignerkey(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSignerkey(dAtA []byte, offset int, v uint64) int {
	offset -= sovSignerkey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignerKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovSignerkey(uint64(l))
	}
	if m.KeyType != 0 {
		n += 1 + sovSignerkey(uint64(m.KeyType))
	}
	if m.ExpiryTime != 0 {
		n += 1 + sovSignerkey(uint64(m.ExpiryTime))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSignerkey(uint64(l))
	}
	if len(m.Permissions) > 0 {
		l = 0
		for _, e := range m.Permissions {
			l += sovSignerkey(uint64(e))
		}
		n += 1 + sovSignerkey(uint64(l)) + l
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovSignerkey(uint64(l))
	}
	return n
}

func (m *MsgUpsertSignerKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovSignerkey(uint64(l))
	}
	if m.KeyType != 0 {
		n += 1 + sovSignerkey(uint64(m.KeyType))
	}
	if m.ExpiryTime != 0 {
		n += 1 + sovSignerkey(uint64(m.ExpiryTime))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSignerkey(uint64(l))
	}
	if len(m.Permissions) > 0 {
		l = 0
		for _, e := range m.Permissions {
			l += sovSignerkey(uint64(e))
		}
		n += 1 + sovSignerkey(uint64(l)) + l
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovSignerkey(uint64(l))
	}
	return n
}

func sovSignerkey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSignerkey(x uint64) (n int) {
	return sovSignerkey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignerKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignerkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignerkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignerkey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= SignerKeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTime", wireType)
			}
			m.ExpiryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignerkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignerkey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSignerkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Permissions = append(m.Permissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSignerkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSignerkey
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSignerkey
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Permissions) == 0 {
					m.Permissions = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSignerkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Permissions = append(m.Permissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignerkey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSignerkey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignerkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignerkey
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSignerkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertSignerKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignerkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertSignerKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertSignerKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignerkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignerkey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= SignerKeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTime", wireType)
			}
			m.ExpiryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignerkey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSignerkey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSignerkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Permissions = append(m.Permissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSignerkey
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSignerkey
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSignerkey
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Permissions) == 0 {
					m.Permissions = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSignerkey
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Permissions = append(m.Permissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignerkey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSignerkey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignerkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignerkey
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSignerkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignerkey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignerkey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignerkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSignerkey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSignerkey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSignerkey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSignerkey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignerkey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSignerkey = fmt.Errorf("proto: unexpected end of group")
)
