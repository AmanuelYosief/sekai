// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: order.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitOrderType int32

const (
	LimitOrderType_limitBuy  LimitOrderType = 0
	LimitOrderType_limitSell LimitOrderType = 1
)

var LimitOrderType_name = map[int32]string{
	0: "limitBuy",
	1: "limitSell",
}

var LimitOrderType_value = map[string]int32{
	"limitBuy":  0,
	"limitSell": 1,
}

func (x LimitOrderType) String() string {
	return proto.EnumName(LimitOrderType_name, int32(x))
}

func (LimitOrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{0}
}

type OrderBook struct {
	ID       string                                        `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Index    uint32                                        `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Base     string                                        `protobuf:"bytes,3,opt,name=Base,proto3" json:"Base,omitempty"`
	Quote    string                                        `protobuf:"bytes,4,opt,name=Quote,proto3" json:"Quote,omitempty"`
	Mnemonic string                                        `protobuf:"bytes,5,opt,name=Mnemonic,proto3" json:"Mnemonic,omitempty"`
	Curator  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,6,opt,name=Curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"Curator,omitempty"`
}

func (m *OrderBook) Reset()         { *m = OrderBook{} }
func (m *OrderBook) String() string { return proto.CompactTextString(m) }
func (*OrderBook) ProtoMessage()    {}
func (*OrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{0}
}
func (m *OrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBook.Merge(m, src)
}
func (m *OrderBook) XXX_Size() int {
	return m.Size()
}
func (m *OrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBook proto.InternalMessageInfo

func (m *OrderBook) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *OrderBook) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *OrderBook) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *OrderBook) GetQuote() string {
	if m != nil {
		return m.Quote
	}
	return ""
}

func (m *OrderBook) GetMnemonic() string {
	if m != nil {
		return m.Mnemonic
	}
	return ""
}

func (m *OrderBook) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

type MsgCreateOrderBook struct {
	Base     string                                        `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Quote    string                                        `protobuf:"bytes,2,opt,name=Quote,proto3" json:"Quote,omitempty"`
	Mnemonic string                                        `protobuf:"bytes,3,opt,name=Mnemonic,proto3" json:"Mnemonic,omitempty"`
	Curator  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=Curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"Curator,omitempty"`
}

func (m *MsgCreateOrderBook) Reset()         { *m = MsgCreateOrderBook{} }
func (m *MsgCreateOrderBook) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOrderBook) ProtoMessage()    {}
func (*MsgCreateOrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{1}
}
func (m *MsgCreateOrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOrderBook.Merge(m, src)
}
func (m *MsgCreateOrderBook) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOrderBook proto.InternalMessageInfo

func (m *MsgCreateOrderBook) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *MsgCreateOrderBook) GetQuote() string {
	if m != nil {
		return m.Quote
	}
	return ""
}

func (m *MsgCreateOrderBook) GetMnemonic() string {
	if m != nil {
		return m.Mnemonic
	}
	return ""
}

func (m *MsgCreateOrderBook) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

type LimitOrder struct {
	ID          string                                        `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Index       uint32                                        `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	OrderBookID string                                        `protobuf:"bytes,3,opt,name=OrderBookID,proto3" json:"OrderBookID,omitempty"`
	OrderType   LimitOrderType                                `protobuf:"varint,4,opt,name=OrderType,proto3,enum=kira.ixp.LimitOrderType" json:"OrderType,omitempty"`
	Amount      int64                                         `protobuf:"varint,5,opt,name=Amount,proto3" json:"Amount,omitempty"`
	LimitPrice  int64                                         `protobuf:"varint,6,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	ExpiryTime  int64                                         `protobuf:"varint,7,opt,name=ExpiryTime,proto3" json:"ExpiryTime,omitempty"`
	IsCancelled bool                                          `protobuf:"varint,8,opt,name=IsCancelled,proto3" json:"IsCancelled,omitempty"`
	Curator     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,9,opt,name=Curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"Curator,omitempty"`
}

func (m *LimitOrder) Reset()         { *m = LimitOrder{} }
func (m *LimitOrder) String() string { return proto.CompactTextString(m) }
func (*LimitOrder) ProtoMessage()    {}
func (*LimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{2}
}
func (m *LimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrder.Merge(m, src)
}
func (m *LimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrder proto.InternalMessageInfo

func (m *LimitOrder) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *LimitOrder) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LimitOrder) GetOrderBookID() string {
	if m != nil {
		return m.OrderBookID
	}
	return ""
}

func (m *LimitOrder) GetOrderType() LimitOrderType {
	if m != nil {
		return m.OrderType
	}
	return LimitOrderType_limitBuy
}

func (m *LimitOrder) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *LimitOrder) GetLimitPrice() int64 {
	if m != nil {
		return m.LimitPrice
	}
	return 0
}

func (m *LimitOrder) GetExpiryTime() int64 {
	if m != nil {
		return m.ExpiryTime
	}
	return 0
}

func (m *LimitOrder) GetIsCancelled() bool {
	if m != nil {
		return m.IsCancelled
	}
	return false
}

func (m *LimitOrder) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

type MsgCreateOrder struct {
	OrderBookID string                                        `protobuf:"bytes,1,opt,name=OrderBookID,proto3" json:"OrderBookID,omitempty"`
	OrderType   LimitOrderType                                `protobuf:"varint,2,opt,name=OrderType,proto3,enum=kira.ixp.LimitOrderType" json:"OrderType,omitempty"`
	Amount      int64                                         `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	LimitPrice  int64                                         `protobuf:"varint,4,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	ExpiryTime  int64                                         `protobuf:"varint,5,opt,name=ExpiryTime,proto3" json:"ExpiryTime,omitempty"`
	Curator     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,6,opt,name=Curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"Curator,omitempty"`
}

func (m *MsgCreateOrder) Reset()         { *m = MsgCreateOrder{} }
func (m *MsgCreateOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOrder) ProtoMessage()    {}
func (*MsgCreateOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{3}
}
func (m *MsgCreateOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOrder.Merge(m, src)
}
func (m *MsgCreateOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOrder proto.InternalMessageInfo

func (m *MsgCreateOrder) GetOrderBookID() string {
	if m != nil {
		return m.OrderBookID
	}
	return ""
}

func (m *MsgCreateOrder) GetOrderType() LimitOrderType {
	if m != nil {
		return m.OrderType
	}
	return LimitOrderType_limitBuy
}

func (m *MsgCreateOrder) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgCreateOrder) GetLimitPrice() int64 {
	if m != nil {
		return m.LimitPrice
	}
	return 0
}

func (m *MsgCreateOrder) GetExpiryTime() int64 {
	if m != nil {
		return m.ExpiryTime
	}
	return 0
}

func (m *MsgCreateOrder) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

// https://github.com/KiraCore/docs/blob/master/spec/iteration-0/kip_3.md
type MsgCancelOrder struct {
	OrderID string                                        `protobuf:"bytes,1,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Curator github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,6,opt,name=Curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"Curator,omitempty"`
}

func (m *MsgCancelOrder) Reset()         { *m = MsgCancelOrder{} }
func (m *MsgCancelOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOrder) ProtoMessage()    {}
func (*MsgCancelOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{4}
}
func (m *MsgCancelOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOrder.Merge(m, src)
}
func (m *MsgCancelOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOrder proto.InternalMessageInfo

func (m *MsgCancelOrder) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *MsgCancelOrder) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

func init() {
	proto.RegisterEnum("kira.ixp.LimitOrderType", LimitOrderType_name, LimitOrderType_value)
	proto.RegisterType((*OrderBook)(nil), "kira.ixp.OrderBook")
	proto.RegisterType((*MsgCreateOrderBook)(nil), "kira.ixp.MsgCreateOrderBook")
	proto.RegisterType((*LimitOrder)(nil), "kira.ixp.LimitOrder")
	proto.RegisterType((*MsgCreateOrder)(nil), "kira.ixp.MsgCreateOrder")
	proto.RegisterType((*MsgCancelOrder)(nil), "kira.ixp.MsgCancelOrder")
}

func init() { proto.RegisterFile("order.proto", fileDescriptor_cd01338c35d87077) }

var fileDescriptor_cd01338c35d87077 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x3b, 0x49, 0xff, 0xa4, 0xb3, 0xbb, 0x65, 0x19, 0x16, 0x19, 0xf6, 0x10, 0xc3, 0x82,
	0x50, 0x84, 0x26, 0xa8, 0xe0, 0x55, 0x9a, 0xd6, 0x43, 0x58, 0x17, 0x35, 0xee, 0xc9, 0x5b, 0x36,
	0x19, 0xea, 0xd0, 0x24, 0x13, 0x66, 0x12, 0x4c, 0x3f, 0x85, 0x7e, 0x0b, 0xbf, 0x88, 0x07, 0x8f,
	0x0b, 0x5e, 0x3c, 0x89, 0xb4, 0xdf, 0xc2, 0x93, 0x64, 0x26, 0x6d, 0xb3, 0xea, 0xba, 0xb2, 0xdb,
	0x53, 0xde, 0xf7, 0x79, 0x5f, 0x32, 0xcf, 0xfc, 0x1e, 0x12, 0xb8, 0xc7, 0x78, 0x44, 0xb8, 0x9d,
	0x71, 0x96, 0x33, 0x64, 0xcc, 0x29, 0x0f, 0x6c, 0x5a, 0x66, 0xc7, 0x47, 0x33, 0x36, 0x63, 0x52,
	0x74, 0xaa, 0x4a, 0xcd, 0x4f, 0x3e, 0x03, 0xd8, 0x7f, 0x59, 0xed, 0xbb, 0x8c, 0xcd, 0xd1, 0x00,
	0x6a, 0xde, 0x14, 0x03, 0x0b, 0x0c, 0xfb, 0xbe, 0xe6, 0x4d, 0xd1, 0x11, 0xec, 0x78, 0x69, 0x44,
	0x4a, 0xac, 0x59, 0x60, 0x78, 0xe0, 0xab, 0x06, 0x21, 0xd8, 0x76, 0x03, 0x41, 0xb0, 0x2e, 0xf7,
	0x64, 0x5d, 0x6d, 0xbe, 0x2e, 0x58, 0x4e, 0x70, 0x5b, 0x8a, 0xaa, 0x41, 0xc7, 0xd0, 0x38, 0x4b,
	0x49, 0xc2, 0x52, 0x1a, 0xe2, 0x8e, 0x1c, 0x6c, 0x7a, 0x74, 0x0a, 0x7b, 0x93, 0x82, 0x07, 0x39,
	0xe3, 0xb8, 0x6b, 0x81, 0xe1, 0xbe, 0xfb, 0xe8, 0xe7, 0xf7, 0xfb, 0xa3, 0x19, 0xcd, 0xdf, 0x15,
	0x17, 0x76, 0xc8, 0x12, 0x27, 0x64, 0x22, 0x61, 0xa2, 0x7e, 0x8c, 0x44, 0x34, 0x77, 0xf2, 0x45,
	0x46, 0x84, 0x3d, 0x0e, 0xc3, 0x71, 0x14, 0x71, 0x22, 0x84, 0xbf, 0x7e, 0xc3, 0xc9, 0x27, 0x00,
	0xd1, 0x99, 0x98, 0x4d, 0x38, 0x09, 0x72, 0xb2, 0xbd, 0xcf, 0xda, 0x29, 0xf8, 0x9b, 0x53, 0xed,
	0x3a, 0xa7, 0xfa, 0xf5, 0x4e, 0xdb, 0x77, 0x76, 0xfa, 0x55, 0x83, 0xf0, 0x05, 0x4d, 0x68, 0x2e,
	0x5d, 0xfe, 0x27, 0x71, 0x0b, 0xee, 0x6d, 0x2e, 0xe5, 0x4d, 0x6b, 0x83, 0x4d, 0x09, 0x3d, 0xad,
	0x63, 0x3c, 0x5f, 0x64, 0x2a, 0x83, 0xc1, 0x63, 0x6c, 0xaf, 0xb3, 0xb7, 0xb7, 0x07, 0x56, 0x73,
	0x7f, 0xbb, 0x8a, 0xee, 0xc1, 0xee, 0x38, 0x61, 0x45, 0x9a, 0xcb, 0x7c, 0x74, 0xbf, 0xee, 0x90,
	0x59, 0xbb, 0x7c, 0xc5, 0x69, 0x48, 0x64, 0x40, 0xba, 0xdf, 0x50, 0xaa, 0xf9, 0xf3, 0x32, 0xa3,
	0x7c, 0x71, 0x4e, 0x13, 0x82, 0x7b, 0x6a, 0xbe, 0x55, 0x2a, 0xc7, 0x9e, 0x98, 0x04, 0x69, 0x48,
	0xe2, 0x98, 0x44, 0xd8, 0xb0, 0xc0, 0xd0, 0xf0, 0x9b, 0x52, 0x93, 0x6a, 0xff, 0xce, 0x54, 0x3f,
	0x68, 0x70, 0x70, 0x35, 0xff, 0xdf, 0x99, 0x81, 0x1b, 0x98, 0x69, 0xb7, 0x61, 0xa6, 0xff, 0x83,
	0x59, 0xfb, 0x06, 0x66, 0x9d, 0x3f, 0x98, 0xed, 0xf4, 0x8b, 0x78, 0xaf, 0x80, 0x48, 0xdc, 0x0a,
	0x08, 0x86, 0x3d, 0x59, 0x6c, 0x60, 0xac, 0xdb, 0x9d, 0x1e, 0xfc, 0x70, 0x04, 0x07, 0x57, 0xd1,
	0xa1, 0x7d, 0x68, 0xc4, 0x95, 0xe2, 0x16, 0x8b, 0xc3, 0x16, 0x3a, 0x80, 0x7d, 0xd9, 0xbd, 0x21,
	0x71, 0x7c, 0x08, 0xdc, 0x67, 0x5f, 0x96, 0x26, 0xb8, 0x5c, 0x9a, 0xe0, 0xc7, 0xd2, 0x04, 0x1f,
	0x57, 0x66, 0xeb, 0x72, 0x65, 0xb6, 0xbe, 0xad, 0xcc, 0xd6, 0xdb, 0x07, 0x0d, 0x03, 0xa7, 0x94,
	0x07, 0x13, 0xc6, 0x89, 0x23, 0xc8, 0x3c, 0xa0, 0x4e, 0xe9, 0xd0, 0x32, 0x53, 0x1e, 0x2e, 0xba,
	0xf2, 0x47, 0xf6, 0xe4, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x0a, 0xa4, 0x67, 0xf7, 0x04,
	0x00, 0x00,
}

func (m *OrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Quote) > 0 {
		i -= len(m.Quote)
		copy(dAtA[i:], m.Quote)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Quote)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateOrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Quote) > 0 {
		i -= len(m.Quote)
		copy(dAtA[i:], m.Quote)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Quote)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.IsCancelled {
		i--
		if m.IsCancelled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ExpiryTime != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ExpiryTime))
		i--
		dAtA[i] = 0x38
	}
	if m.LimitPrice != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.LimitPrice))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if m.OrderType != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OrderBookID) > 0 {
		i -= len(m.OrderBookID)
		copy(dAtA[i:], m.OrderBookID)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.OrderBookID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x32
	}
	if m.ExpiryTime != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ExpiryTime))
		i--
		dAtA[i] = 0x28
	}
	if m.LimitPrice != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.LimitPrice))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.OrderType != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrderBookID) > 0 {
		i -= len(m.OrderBookID)
		copy(dAtA[i:], m.OrderBookID)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.OrderBookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OrderID) > 0 {
		i -= len(m.OrderID)
		copy(dAtA[i:], m.OrderID)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.OrderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovOrder(uint64(m.Index))
	}
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Quote)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *MsgCreateOrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Quote)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *LimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovOrder(uint64(m.Index))
	}
	l = len(m.OrderBookID)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.OrderType != 0 {
		n += 1 + sovOrder(uint64(m.OrderType))
	}
	if m.Amount != 0 {
		n += 1 + sovOrder(uint64(m.Amount))
	}
	if m.LimitPrice != 0 {
		n += 1 + sovOrder(uint64(m.LimitPrice))
	}
	if m.ExpiryTime != 0 {
		n += 1 + sovOrder(uint64(m.ExpiryTime))
	}
	if m.IsCancelled {
		n += 2
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *MsgCreateOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderBookID)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.OrderType != 0 {
		n += 1 + sovOrder(uint64(m.OrderType))
	}
	if m.Amount != 0 {
		n += 1 + sovOrder(uint64(m.Amount))
	}
	if m.LimitPrice != 0 {
		n += 1 + sovOrder(uint64(m.LimitPrice))
	}
	if m.ExpiryTime != 0 {
		n += 1 + sovOrder(uint64(m.ExpiryTime))
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *MsgCancelOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= LimitOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitPrice", wireType)
			}
			m.LimitPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTime", wireType)
			}
			m.ExpiryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCancelled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCancelled = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= LimitOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitPrice", wireType)
			}
			m.LimitPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTime", wireType)
			}
			m.ExpiryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
